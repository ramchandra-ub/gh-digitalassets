#!/usr/bin/env python
#set -e


import argparse
from github import Github
from github import GithubException
import subprocess
import json 
import dotenv
import os
import sys
from InquirerPy import prompt
import base64
import requests as request
import github
from fuzzywuzzy import fuzz


#before performing any operation, the tool checks if the user is logged into an account or not.
def check_login():
    token = subprocess.run("gh auth token", shell = True, capture_output = True)
    token = token.stdout.decode('ascii').strip()
    dotenv_file = dotenv.find_dotenv('variables.env')
    dotenv.load_dotenv(dotenv_file)
    #print(os.environ["AUTH_TOKEN"])
    if(os.environ['AUTH_TOKEN'] != token):
        token = login()
        os.environ["AUTH_TOKEN"] = token 
        dotenv.set_key(dotenv_file, "AUTH_TOKEN", os.environ["AUTH_TOKEN"])

    return token


#login to an account
def login():
    print('logging in')
    subprocess.run("gh auth login", shell = True)

    token = subprocess.run("gh auth token", shell = True, capture_output = True)

    token = token.stdout.decode('ascii').strip()
    return token



#build the topics according to the ens standards, also take user personal topics
def topic_writing():
    print("Please choose a topic according to the ENS standards. Here are the topics you can choose from:")
    questions = [
        {
        'type': 'list',
        'name': 'topic',
        'message': 'What topic to add?',
        'choices': ["ens-machinelearning", "ens-mathematics", "ens-lifesciences", "ens-sports", "ens-others"],
        'filter': lambda val: val.lower()
        },
    ]
    answers = prompt(questions)
    topics = []
    topics.append(answers['topic'])
    # print("Do you want to add more topics?, If yes, please add them coma separated:")
    # resp = input().split(',')
    # resp.append(answers['topic'])
    userinp1 = input("You can also add custom topics to this digital asset. Press Y if you want to add new topics to the repo. Otherwise press N: ")
    if userinp1 == "Y":
        userinp2 = input("Enter the topic names using comma separation: ")
        inputsplit = userinp2.split(",")
        for topic in inputsplit:
            if topic in topics:
                print("This topic "+topic+" is already added")
                continue
            topics.append(topic)
    return(topics)


# userinp1 = input("You can also add custom topics to this digital asset. Press Y if you want to add new topics to the repo. Otherwise press N: ")
    # if userinp1 == "Y":
    #     userinp2 = input("Enter the topic names using comma separation: ")
    #     inputsplit = userinp2.split(",")
    #     for topic in inputsplit:
    #         if topic in topics:
    #             print("This topic "+topic+" is already added")
    #             continue
    #         topics.append(topic)
    
    # topics.append("ens-asset")
    # metaData["topics"] = topics

#metadata file does not exist. Build it interactively.
def interactiveBuilding():
    metaData = {}
    print("Please provide the asset Name.")
    assetName = str(input())
    metaData["assetName"] = assetName
    print("Please provide a one liner description")
    description = str(input())
    metaData["description"] = description
    topic_inp = topic_writing()
    topics = topic_inp
    print(topics)
    topics.append("ens-asset")
    var = any(tag in topics for tag in ensTopicList)
    print(var)
    if(not var):
        return("Please provide a topic acoording to the ENS standards", 0)
    else:
        metaData["topics"] = topics


    print("Please provide the associations(URSL's). If multiple, provide then coma separated")
    associations = input().split(',')
    metaData["associations"] = associations

    json_object = json.dumps(metaData, indent = 4)
    return(json_object, 1)



#if metadata file exists, then check if it according to the metadata standard. Else build it interactively
def metaDataParser(fileContent):
    parsers = ['assetName', 'description', 'topics', 'associations']
    try:
        metaData = json.loads(fileContent or '{}')
    except json.decoder.JSONDecodeError:
        print("Please check the format of your json file")


    remaining = {}
    keys = []
    counter = 0
    topics_bool = True
    for tag in parsers:
        if(tag in metaData):
            if(tag == 'topics'):
                topics_list = metaData['topics']
                var = any(tag in topics_list for tag in ensTopicList)
                if(not var):
                    print("Please provide a topic according to the ENS standards.")
                    topics_bool = False
            if(tag == 'associations'):
                if(metaData[tag]):
                    if(type(metaData[tag]) != list):
                        lst = [metaData[tag]]
                        metaData[tag] = lst

            if(metaData[tag]):
                pass 
                counter += 1
            else:
                if(tag != 'topics'):
                    print("There is no value provided for the key {}".format(tag))
                    remaining[tag] = ""
                else:
                    pass
        else:
            print("{} key not present in the file".format(tag))
            keys.append(tag)
    if(counter == 4 and topics_bool == True):
        json_object = json.dumps(metaData, indent = 4)
        return(json_object, 1)

    if(len(remaining) > 0 or len(keys) > 0 or topics_bool == False):
        print("Do you want to interactively add the missing keys or values?: Y or N")
        resp = input()
        if(resp == 'Y'):
            if(len(remaining) > 0):
                for tag in remaining:
                    if(tag == 'associations'):
                        print("Please provide the associations(URL's). If multiple, provide then coma separated")
                        associations = input().split(',')
                        metaData["associations"] = associations
                    else:
                        print("Please provide the value of the {}".format(tag))
                        resp_tag = input()
                        metaData[tag] = resp_tag
            if(len(keys) > 0):
                print("Please provide the value for the following keys")
                for tag in keys:
                    if(tag == 'topics'):
                        print("Provide the value of the tag {}".format(tag))
                        metaData['topics'] = []
                        topic_inp = topic_writing()
                        
                        for top in range(len(topic_inp)):
                            metaData['topics'].append(topic_inp[top])
                    elif(tag == 'associations'):
                        print("Please provide the associations(URL's). If multiple, provide then coma separated")
                        associations = input().split(',')
                        metaData["associations"] = associations
                    else:
                        print("Provide the value of the tag {}".format(tag))
                        resp_tag = input()
                        metaData[tag] = resp_tag
            if(not topics_bool):
                topic_inp = topic_writing()

                for top in range(len(topic_inp)):
                    metaData['topics'].append(topic_inp[top])

        else:
            return("Please change your json file accordingly and re-upload", 0)

    metaData["topics"].append("ens-asset")
    json_object = json.dumps(metaData, indent = 4)
    return(json_object, 1)






#git upload a metadata file
def gitUpload(fileContent, file_content):
 
    updateFile = repo.get_contents(file_content , ref = 'main')
    repo.update_file(updateFile.path, "updating the file with some changes", fileContent, updateFile.sha, branch = 'main')

    print("Updated the file in the repo")

#git upload a data file
def gitUpload_data(fileContent, updateFile):

    file_content = repo.get_contents(updateFile , ref = 'main')
    
    repo.update_file(file_content.path, "updating the file with some changes", fileContent, file_content.sha, branch = 'main')

    print("Updated the file in the repo")


#updating a metadata file
def metadata():
    if(args.filepath):
        file_list = os.listdir(args.filepath)
        if('metadata.json' not in file_list):
            print("No metadata file present. Do you want to interactively build it and upload?")
            resp = input()
            if(resp == 'Y'):
                uploadFile, flag = interactiveBuilding()
                if(not flag):
                    return(uploadFile, 0)
                else:
                    gitUpload(uploadFile, metadata.json)
                    with open(f"{args.filepath}/metadata.json","w") as outfile:
                        outfile.write(uploadFile)
                        
                    return('success', 1)

        else:
            with open(args.filepath + 'metadata.json') as file:
                fileContent = file.read()
            var, flag = metaDataParser(fileContent)

            if(flag == 0):
                return(var, 0)
            else:
                gitUpload(str(var), 'metadata.json')
                with open(f"{args.filepath}/metadata.json","w") as outfile:
                    outfile.write(var)
                    
                return('success', 1)


    else:
        cwd = os.getcwd()
        cwd += '/'
        file_list = os.listdir(cwd)
        if('metadata.json' not in file_list):
            print("No metadata file present. Do you want to interactively build it and upload?")
            resp = input()
            if(resp == 'Y'):
                uploadFile, flag = interactiveBuilding()
                if(flag == 0):
                    return(uploadFile, 0)
                else:
                    gitUpload(uploadFile, 'metadata.json')
                    with open(f"{cwd}metadata.json","w") as outfile:
                        
                        outfile.write(uploadFile)
                    return('success', 1)
        else:
            with open(cwd + 'metadata.json') as file:
                fileContent = file.read()
            var, flag = metaDataParser(fileContent)

            if(flag == 0):
                return(var, 0)
            else:
                gitUpload(str(var), 'metadata.json')
                with open(f"{cwd}metadata.json","w") as outfile:
                    
                    outfile.write(var)
                return('success', 1)

#updating a datafile
def dataFile():
    if(args.filepath):
        file_list = os.listdir(args.filepath)
        if(not args.updateFile):
            
            if(len(file_list) == 0):
                return('The folder is empty. Please have your data file in the directory', 0)
            if('.DS_Store' in file_list):
                file_list.remove('.DS_Store')
            if('metadata.json' in file_list):
                file_list.remove('metadata.json')
            
        
            if(len(file_list) != 0):
                for files in range(len(file_list)):
                    with open(args.filepath + file_list[files], 'rb') as file:
                        fileContent = file.read()
                    base64_content = base64.b64encode(fileContent).decode('utf-8')
                    updateFile = file_list[files]
                    try:
                        gitUpload_data(fileContent, updateFile)
                        return('success', 1)
                    except:
                        print("exception in git upload")
            else:
                return("No data file present", 0)
        else:
            if(args.updateFile not in file_list):
                return("Data file does not exist", 0)
            with open(args.filepath + args.updateFile, 'rb') as file:
                fileContent = file.read()
            base64_content = base64.b64encode(fileContent).decode('utf-8') 
            updateFile = args.updateFile
            gitUpload_data(fileContent, updateFile)
            return('success', 1)

    else:
        cwd = os.getcwd()
        cwd += '/'
        file_list = os.listdir(cwd)
        if(not args.updateFile):
            
            if(len(file_list) == 0):
                return('The folder is empty. Please have your data file in the directory', 0)
            if('.DS_Store' in file_list):
                file_list.remove('.DS_Store')
            if('metadata.json' in file_list):
                file_list.remove('metadata.json')
            
        
            if(len(file_list) != 0):
                for files in range(len(file_list)):
                    with open(cwd + file_list[files], 'rb') as file:
                        fileContent = file.read()
                    base64_content = base64.b64encode(fileContent).decode('utf-8')
                    updateFile = file_list[files]
                    gitUpload_data(fileContent, updateFile)
                    return('success', 1)
            else:
                return("No data file present", 0)
        else:
            if(args.updateFile not in file_list):
                return("Data file does not exist", 0)
            with open(cwd + args.updateFile, 'rb') as file:
                fileContent = file.read()
            base64_content = base64.b64encode(fileContent).decode('utf-8') 
            updateFile = args.updateFile
            gitUpload_data(fileContent, updateFile)
            return('success', 1)


##########################################################################
## helper commands for create ##
##########################################################################

### Metadata Checking and interactive building of missing parts in metadata
def metaDataParserCreate(fileContent):
    parsers = ['assetName', 'description', 'topics', 'associations']
    try:
        metaData = json.loads(fileContent)
    except:
        print("Metadata file is empty. You can use interactive building to build the metadata on the fly. Press Y or N")
        userinp = input()
        if userinp == "Y":
            return interactiveBuildingCreate() 
        else:
            print("Please change the file and come back.")
            sys.exit()

    remaining = {}
    keys = []
    counter = 0
    topics_bool = True
    for tag in parsers:
        if(tag in metaData):
            if(tag == 'topics'):
                topics_list = metaData['topics']
                ensTopicListLower = [x.lower() for x in ensTopicList]
                var = any(tag in ensTopicListLower for tag in topics_list)
                if(not var):
                    print("Please provide a topic according to the ENS standards.")
                    topics_bool = False
            if(tag == 'associations'):
                if(metaData[tag]):
                    if(type(metaData[tag]) != list):
                        lst = [metaData[tag]]
                        metaData[tag] = lst
            if(metaData[tag]):
                pass 
                counter += 1
            else:
                print("There is no value provided for the key {}".format(tag))
                remaining[tag] = ""
        else:
            print("{} key not present in the file".format(tag))
            keys.append(tag)
    if(counter == 4 and topics_bool == True):
        metaData["topics"].append("ens-asset")
        metaData["topics"] = list(set(metaData["topics"]))
        json_object = json.dumps(metaData, indent = 4)
        return(json_object, 1,metaData["topics"],metaData["description"])

    if(len(remaining) > 0 or len(keys) > 0 or topics_bool == False):
        print("Do you want to interactively add the missing keys or values?: Y or N")
        resp = input()
        if(resp == 'Y'):
            if(len(remaining) > 0):
                for tag in remaining:
                    if(tag == 'associations'):
                        print("Please provide the associations(URL's). If multiple, provide then coma separated")
                        associations = input().split(',')
                        metaData["associations"] = associations
                    else:
                        print("Please provide the value of the {}".format(tag))
                        resp_tag = input()
                        metaData[tag] = resp_tag
            if(len(keys) > 0):
                print("Please provide the value for the following keys")
                for tag in keys:
                    if(tag == "topics"):
                        print("Provide the value of the tag {}".format(tag))
                        metaData["topics"] = []
                        topic_inp = topic_writing()
                        for top in range(len(topic_inp)):
                            metaData['topics'].append(topic_inp[top])
                    elif(tag == 'associations'):
                        print("Please provide the associations(URL's). If multiple, provide then coma separated")
                        associations = input().split(',')
                        metaData["associations"] = associations
                    else:
                        print("Provide the value of the tag {}".format(tag))
                        resp_tag = input()
                        metaData[tag] = resp_tag
            if(not topics_bool):
                topic_inp = topic_writing()
                for top in range(len(topic_inp)):
                    metaData['topics'].append(topic_inp[top])

        else:
            return("Please change your json file accordingly and re-upload", 0,0,0)
    metaData["topics"].append("ens-asset")
    metaData["topics"] = list(set(metaData["topics"]))
    json_object = json.dumps(metaData, indent = 4)
    return(json_object,1,metaData["topics"],metaData["description"])

####################################################################################

### Interactive building if there is no metadata file
def interactiveBuildingCreate():
    metaData = {}
    print("Please provide the asset Name.")
    assetName = str(input())
    metaData["assetName"] = assetName
    print("Please provide a one liner description")
    description = str(input())
    metaData["description"] = description
    topics = []
    print("Please select a mandatory topic from below")
    questions = [
        {
        'type': 'list',
        'name': 'topic',
        'message': 'What topic to add?',
        'choices': ["ens-machinelearning", "ens-mathematics", "ens-lifeSciences", "ens-Sports", "ens-others"],
        'filter': lambda val: val.lower()
        },
    ]
    answers = prompt(questions)
    # print(answers['topic'])
    topics.append(answers['topic'])

    userinp1 = input("You can also add custom topics to this digital asset. Press Y if you want to add new topics to the repo. Otherwise press N: ")
    if userinp1 == "Y":
        userinp2 = input("Enter the topic names using comma separation: ")
        inputsplit = userinp2.split(",")
        for topic in inputsplit:
            if topic in topics:
                print("This topic "+topic+" is already added")
                continue
            topics.append(topic)
    
    topics.append("ens-asset")
    metaData["topics"] = topics

    print("Please provide the associations(URSL's). If multiple, provide by giving space")
    associations = input().split()
    metaData["associations"] = associations

    json_object = json.dumps(metaData, indent = 4)
    return(json_object,1,metaData["topics"],metaData["description"])

#####################################################################################

### Upload the files in the specified directory to the repository on GitHub
def uploadFiles_Directory(filePath,createdRepoName):
    allFiles = os.listdir(filePath)
    print(allFiles)
    for files in allFiles:
        if files == ".git":
            continue
        with open((os.path.join(filePath,files)),'rb') as file:
            fileContent = file.read()
        ## upload file to the repo
        # createdRepoName.create_file("testfile.txt","create file",fileContent,branch="main")

        createdRepoName.create_file(files,"create file",fileContent,branch="main")
    print("All files in the specified directory uploaded")

######################################################################################

### Creates the repo(digital asset on GitHub)
def createasset(repoName):
    try:
        createdRepo = user.create_repo(repoName)
        return g.get_repo(createdRepo.full_name)
    except github.GithubException as e:
            print("Error Occured: ", e.data)
            sys.exit()

### Taking the topics to be added from the user and uploading to GitHub repo (digital asset)
### Created in initial version. Not using in actual implementation

# def addTopicsCreation(createdRepoName):
#     print("Topics must be added to this digital asset.\n Please choose from one of the assets below.")
#     repoobj = g.get_repo(createdRepoName.full_name)
#     topics = repoobj.get_topics()
#     questions = [
#         {
#         'type': 'list',
#         'name': 'topic',
#         'message': 'What topic to add?',
#         'choices': ensTopicList,
#         'filter': lambda val: val.lower()
#         },
#     ]
#     answers = prompt(questions)
#     # print(answers['topic'])
#     topics.append(answers['topic'])
#     repoobj.replace_topics(topics)
#     print("Added the given topics to the repo")
#     print("Current topics in this repo are "+str(topics)+"\n")
#     userinp = input("You can also add custom topics to this digital asset. Press Y if you want to add new topics to the repo. Otherwise press N: ")
#     if userinp == "Y":
#         userinp1 = input("Enter the topic names using comma separation: ")
#         inputsplit = userinp1.split(",")
#         for topic in inputsplit:
#             if topic in topics:
#                 print("This topic "+topic+" is already added")
#                 continue
#             topics.append(topic)
#     else:
#         print("Terminating")
#         sys.exit()
        
#     repoobj.replace_topics(topics)
#     print("Added the given topics to the repo")
#     print("Current topics in this repo are "+str(topics))


### Taking description from the user and uploading to GitHub Repo(digital asset)
### Created in initial version. Not using in actual implementation

# def addDesc(createdRepoName):
#     userinp = input("please enter a one line description for the digital asset")
#     subprocess.run(f"gh repo edit {createdRepoName.full_name} -d \"{userinp}\"",shell=True)

######################################################################################
def download_repo(type,repo,chunkSize = 128):
    repo = getRepo(repo)
    repoName = repo.name
    type = type.lower()
    archive_link = repo.get_archive_link(type+"ball",repo.default_branch)
    response = request.get(archive_link,headers={"Authorization": f"token {token}"})
    if response.status_code == 404:
        print("Failed to fetch download file")
    else :
        print("Downloading %s File",type)
        res = request.get(archive_link , stream = True)
        with open(repoName+"."+type,'wb')  as f:
            for chunk in res.iter_content(chunk_size = chunkSize):
                if chunk:
                    f.write(chunk)
        print("Download Successful")

def download_files(files):
    response = request.get(files.download_url, allow_redirects=True)
    open(files.name,'wb').write(response.content)
    print("Download Successful :" + files.name)

def expandRepo(reponame):
    repo = getRepo(reponame)
    contents = repo.get_contents("")
    expandedContents = []
    while(contents):
        newContent = contents.pop(0)
        if newContent.type == 'dir':
            contents.extend(repo.get_contents(newContent.path))
        else:
            expandedContents.append(newContent)
    return expandedContents

def searchfiles(repoN,filename):
    newRepo = getRepo(repoN)
    contents = newRepo.get_contents("")
    exactlist = []
    partiallist = []
    while contents:
        check = True
        newContent = contents.pop(0)
        if newContent.type == 'dir':
            contents.extend(newRepo.get_contents(newContent.path))
        else:
            if newContent.name == filename and newContent.type != 'dir':
                exactlist.append(newContent)
                # response = request.get(newContent.download_url, allow_redirects=True)
                # open(newContent.name,'wb').write(response.content)
                # print("Download Successful :" + newContent.name)
                # sys.exit()
            elif fuzz.partial_ratio(newContent.name.lower(), filename.lower()) >= 80 and newContent.type != 'dir':
                partiallist.append(newContent)
                # response = request.get(newContent.download_url, allow_redirects=True)
                # open(newContent.name,'wb').write(response.content)
                # print("Download Successful :" + newContent.name)
    if(len(exactlist) == 1):
        download_files(exactlist[0])
    elif(len(exactlist) > 1):
        questions = [
                {
                    'type' : 'list',
                    'name' : 'dFile',
                    'message' : 'Select a file to download',
                    'choices' : [x.path for x in exactlist],
                    'filter' : lambda option : option
                    }
                ]
        result = prompt(questions)
        for each in exactlist:
           if result['dFile'] == each.path:
                    download_files(each)
    if(len(exactlist) == 0 and len(partiallist) > 0):
        for each in partiallist:
            download_files(each)
    elif(len(exactlist) == 0 and len(partiallist) == 0):
        print("No file found")


def getRepo(repoName):
    try:
        repo = g.get_repo(repoName)
        return repo
    except github.BadCredentialsException:
        print("Invalid User Token")
        sys.exit()
    except github.UnknownObjectException:
        print("Repo not found. Please enter a valid repo")
        sys.exit()
    except github.GithubException as e:
        print("Error Occured:", e)
        sys.exit()


############ Search Functions ####################

# Function used to search from the user given topics
def get_github_data(topics, input):
    st = ""
    first = True
    for t in topics:
        if(first):
            st = st + "topic:" + t
            first = False
        else:
            st = st + "+topic:" + t

    url_2 = "https://api.github.com/search/repositories?q="+st

    data = request.get(url_2)
    data_json  = data.json()
    count = 0
    for i in range(0,len(data_json['items'])):
        count += 1
        owner = data_json['items'][i]['owner']['login']
        name = data_json['items'][i]['name']
        url = data_json['items'][i]['html_url']

        if(input == 'topics'):
           print(count)
           print('Name: ' + name,'\nLink: ' + url, '\nUploaded By: ' + owner + '\n')

# Function used to list all the digital assets
def list_assets(input):
   topics = ['ens-asset']
   get_github_data(topics, input)

# Search by topics, takes topics as input
def search(input,value):
   topics = ['ens-asset']
   if input == 'topics':
      custom_topics = value.split(",")
      for v in custom_topics:
         topics.append(v)
   get_github_data(topics, input)

# search by keyword, hepler function to find keywords in the metadata file
def github_read_file_str(username, repository_name, github_token=None):
    headers = {}  
    if github_token:
        headers['Authorization'] = f"token {github_token}"
        
    try:
        url = f'https://api.github.com/repos/{username}/{repository_name}/contents/digital-asset-metadata.json'
        r = request.get(url, headers={
    'Authorization': 'Bearer '+token,
    'Accept': 'application/vnd.github+json'})
        r.raise_for_status()
        data = r.json()
        file_content = data['content']
        file_content_encoding = data.get('encoding')
        if file_content_encoding == 'base64':
            file_content = base64.b64decode(file_content).decode()
    except:
        file_content = ""
    return file_content

# Function to call the github_read_file_str for each digital asset
def populate_data(data_json,keyword):
    count = 0
    done = []
    for i in range(0,len(data_json['items'])):

        owner = data_json['items'][i]['owner']['login']
        name = data_json['items'][i]['name']
        url = data_json['items'][i]['html_url']

        file_content = github_read_file_str(owner,name)

       
        for k in keyword:
            if (k.lower() in file_content.lower()) and (url not in done):
                done.append(url)
                count += 1
                print(count)
                print('Name: ' + name,'\nLink: ' + url, '\nUploaded By: ' + owner + '\n')
         
# Function to search by the given repo name
def repo_name_search(name):
   url_2 = "https://api.github.com/search/repositories?q="+name+" in:name topic:ens-asset"

   data = request.get(url_2)
   data_json  = data.json()

   res = []
   count = 0
   for i in range(0,len(data_json['items'])):
         count += 1
         print(count)
         owner = data_json['items'][i]['owner']['login']
         name = data_json['items'][i]['name']
         url = data_json['items'][i]['html_url']

         print('Name: ' + name,'\nLink: ' + url, '\nUploaded By: ' + owner + '\n')


# Function to search by keywords
def keyword_search(keywords):
   
   keywords_sp = []
   custom_topics = keywords.split(",")
   for v in custom_topics:
     keywords_sp.append(v)

   url = 'https://api.github.com/search/repositories?q=topic:ens-asset&per_page=100&page=1'

   data = request.get(url,headers={
         'Authorization': 'Bearer '+token,
         'Accept': 'application/vnd.github+json'})
   data_json  = data.json()

   headers = data.headers

   populate_data(data_json,keywords_sp)

#    below condition checks for pagination
   if "Link" in headers.keys():
      iterate = True
      j = data.headers['Link']
      j = j.split(",")
      url = j[0].split(';')[0].replace('<','').replace('>','')
      
   else:
      iterate = False

   while(iterate):
      data = request.get(url,headers={
         'Authorization': 'Bearer '+token,
         'Accept': 'application/vnd.github+json'})
      
      populate_data(data_json,'asset')
      
      if "Link" in data.headers.keys():
         j = data.headers['Link']
         j = j.split(",")
         if('next' in j[1]):
               url = j[1].split(';')[0].replace('<','').replace('>','')
         else:
               iterate = False
      else:
         iterate = False


############ End of Search Functions ####################


#subscribe to a repo
def subscribeToRepo(reponame):
    dotenv_file = dotenv.find_dotenv('variables.env')
    dotenv.load_dotenv(dotenv_file)
    my_dict = os.getenv('SUBSCRIBED_REPOS')
    my_dict = json.loads(my_dict.replace("'", "\""), strict = False)
    if(reponame in my_dict):
        return("It seems like you have already subscribed to this repo.")
    else:
        try:
            repo = g.get_repo(reponame)
            username = reponame[:reponame.index('/')]
            repo_name = reponame[reponame.index('/')+1:]
            repo_status = subprocess.run("gh api https://api.github.com/repos/{}/{}/commits/main".format(username, repo_name), shell=True, capture_output=True)
            repo_status = json.loads(repo_status.stdout)
            my_dict[reponame] = repo_status['files'][0]['sha']
            dotenv.set_key(dotenv_file, "SUBSCRIBED_REPOS", str(my_dict))
            return("Success. Subscribed to this repo")
        except GithubException as e:
            print(e)
            if e.status == 404:
                print("Repository not found. Please enter a correct reponame")
        


#to get the status of a repo
def getStatus(reponame):
    dotenv_file = dotenv.find_dotenv('variables.env')
    dotenv.load_dotenv(dotenv_file)
    my_dict = os.getenv('SUBSCRIBED_REPOS')
    my_dict = json.loads(my_dict.replace("'", "\""), strict = False)

    if(reponame in my_dict):
        username = reponame[:reponame.index('/')]
        repo_name = reponame[reponame.index('/')+1:]
        repo_status = subprocess.run("gh api https://api.github.com/repos/{}/{}/commits/main".format(username, repo_name), shell=True, capture_output=True)
     
        repo_status = json.loads(repo_status.stdout)
        if(len(repo_status['files']) > 0):
            try:
                if(my_dict[reponame] != repo_status['files'][0]['sha']):
                    print("SHA: ", repo_status['files'][0]['sha'])
                    print("File Name: ", repo_status['files'][0]['filename'])
                    print("Status: ", repo_status['files'][0]['status'])
                    print("Additions: ",repo_status['files'][0]['additions'])
                    print("Deletions: ",repo_status['files'][0]['deletions'])
                    print("Changes: ",repo_status['files'][0]['changes'])
                    print("Blob URL: ",repo_status['files'][0]['blob_url'])

                    my_dict[reponame] = repo_status['files'][0]['sha']
                    dotenv.set_key(dotenv_file, "SUBSCRIBED_REPOS", str(my_dict))
                else:
                    print("No changes to show.")
            except Exception as ex:
                print("An error Occured." + ex.data['message'])
        else:
            print("No changes to show")

    else:
        print("Please subscribe to this repo first")
    



         
         
######################################################################################
def main():
    ################## update related code #######################
    if args.command == "updateFile":
        print("\n####################### Update File ##########################\n")

        if(args.updateType == 'metadata'):
            try:
                imp, flag = metadata()
                if(flag == 0):
                    print(imp)
            except Exception as ex:
                print("An error Occured." + ex.data['message'])

        elif(args.updateType == 'data'):
            try:
                imp, flag = dataFile()
                if(flag == 0):
                    print(imp)
            except Exception as ex:
                print("An error Occured" + ex.data['message'])
        
        elif(args.updateType == 'both'):
            try:
                imp1, flag1 = dataFile()
                if(flag1 == 0):
                    print(imp1)
                    sys.exit()
                imp, flag = metadata()   
                if(flag == 0):
                    print(imp)
            except Exception as ex:
                print("An error Occured." + ex.data['message'])
            
        else:
            print("Invalid input")

    ########################## Subscribe related code ######################

    if args.command == "subscribeRepo":
        res = subscribeToRepo(args.reponame)
        print(res)

    ########################## Subscribe related code ######################

    if args.command == "getStatus":
        res = getStatus(args.reponame)
        #print(res)

    ##############################################
    ## Create related code ##
    ##############################################
    if args.command == "createRepo":
        ## variable to track if metadata file is present or not
        metadataFlag = 0
        # g,user = getAuthToken()

        ## create empty repo
        if args.empty == "True":
            # createdRepo = user.create_repo(args.reponame)
            createdRepoName = createasset(args.reponame)
            print("Empty repo created. Upload the digital asset files.")
        else:
            # createdRepo = user.create_repo(args.reponame)
            
            # createdRepoName = g.get_repo(createdRepo.full_name)

            ## if no path is given, take current directory and proceed
            if args.path is None:
                print("Files must be uploaded when creating a non-empty repo")
                print("Files in the current repo are: ")
                print(os.listdir(os.getcwd()))
                userinp = input("Do you want all files in the current directory to be uploaded?  Press Y/N: Pressing N will not create any repo.")
                if userinp == "Y":
                    allFiles = os.listdir(os.getcwd())
                    print(allFiles)
                    for files in allFiles:
                        if "metadata.json" in files:
                            metadataFlag = 1
                            with open((os.path.join(os.getcwd(),files)),'rb') as file:
                                fileContent = file.read()
                                ## metaDataParserCreate() function below will parse metadata and check for missing values
                                ## If there are any missing values we add them interactively
                                jsonObject, flag, topicsFunc, descFunc = metaDataParserCreate(fileContent)
                                ## Below code kicks in if user doesn't want to change metadata interactively
                                if(flag == 0):
                                    print(jsonObject)
                                    sys.exit()
                                else:
                                    with open(f"{os.getcwd()}/metadata.json","w") as outfile:
                                        outfile.write(jsonObject)


                    ### If metdata file is not found below code runs
                    if metadataFlag == 0:
                        print("Metadata file not found. It is mandatory for a digital asset.")
                        userinp = input("You can create it interactively. Press Y to create interactively, or press N to create it manually: ")
                        if userinp == "Y":
                            jsonObject,flag,topicsFunc,descFunc = interactiveBuildingCreate()
                            with open(f"{os.getcwd()}/metadata.json","w") as outfile:
                                outfile.write(jsonObject)
                        else:
                            print("Please come back after creating the metadata.json file")
                            sys.exit()

                    ### After handling all the conditions related to metadata we create the repo

                    createdRepoName = createasset(args.reponame)
                    print("Repo created with name "+ str(createdRepoName.full_name))
                    uploadFiles_Directory(os.getcwd(),createdRepoName)
                    ###################
                    ## add the topics to the repo
                    ###################
                    repoobj = g.get_repo(createdRepoName.full_name)
                    print("Below topics have been added to the repo")
                    print(topicsFunc)

                    repoobj.replace_topics(topicsFunc)
                    ###################
                    ## add the desc to the repo
                    ###################
                    subprocess.run(f"gh repo edit {createdRepoName.full_name} -d {descFunc}",shell=True)
                    ### Below two lines were used in previous implementation. Not needed
                    # addTopicsCreation(createdRepoName)
                    # addDesc(createdRepoName)
                else:
                    sys.exit()

            ### If user gives a single file to upload instead of directory

            # elif os.path.isfile(args.path):
            #     createdRepoName = createRepo(args.reponame)
            #     print("Repo created with name "+ str(createdRepoName.full_name))
            #     with open(args.path, 'rb') as file:
            #         fileContent = file.read()
            #     ## upload file to the repo
            #     # createdRepoName.create_file("testfile.txt","create file",fileContent,branch="main")

            #     createdRepoName.create_file(args.path.split('\\')[-1],"create file",fileContent,branch="main")
            #     print("testfile created in the repo" + str(createdRepoName.full_name))
            #     addTopicsCreation(createdRepoName)
            #     addDesc(createdRepoName)
            
            ### if user gives a path instead of current directory
            elif os.path.isdir(args.path):
                allFiles = os.listdir(args.path)
                print(allFiles)
                for files in allFiles:
                    if "metadata.json" in files:
                        metadataFlag = 1
                        with open((os.path.join(args.path,files)),'rb') as file:
                            fileContent = file.read()
                            jsonObject, flag, topicsFunc, descFunc = metaDataParserCreate(fileContent)
                            
                            if(flag == 0):
                                print(jsonObject)
                                sys.exit()
                            else:
                                with open(f"{args.path}/metadata.json","w") as outfile:
                                    outfile.write(jsonObject)

                if metadataFlag == 0:
                    print("Metadata file not found. It is mandatory for a digital asset.")
                    userinp = input("You can create it interactively. Press Y to create interactively, or press N to create it manually: ")
                    if userinp == "Y":
                        jsonObject, dummy, topicsFunc, descFunc = interactiveBuildingCreate()
                        with open(f"{args.path}/metadata.json","w") as outfile:
                            outfile.write(jsonObject)
                    else:
                        print("Please come back after creating the metadata.json file")
                        sys.exit()

                createdRepoName = createasset(args.reponame)
                print("Repo created with name "+ str(createdRepoName.full_name))
                uploadFiles_Directory(args.path,createdRepoName)
                ###################
                ## add the topics to the repo
                ###################
                repoobj = g.get_repo(createdRepoName.full_name)
                repoobj.replace_topics(topicsFunc)
                ###################
                ## add the desc to the repo
                ###################
                subprocess.run(f"gh repo edit {createdRepoName.full_name} -d {descFunc}",shell=True)
                ### Below two lines were used in previous implementation. Not needed
                # addTopicsCreation(createdRepoName)
                # addDesc(createdRepoName)
    


    elif args.command == "downloadRepo":
        repo = args.reponame
        newRepo = getRepo(repo)
        questions = [
            {
            'type' : 'list',
            'name' : 'format',
            'message' : 'How would you like to download the repo?',
            'choices' : ['Zip','Tar'],
            'filter' : lambda option : option
         }
        ]
        result = prompt(questions)
        if result['format'] == 'Zip':
            type = "zip"
            download_repo(type,repo)
        elif result['format'] == 'Tar':
            type = 'tar'
            download_repo(type,repo)
        else:
            print("Download Failed. Please check the repo name")

    elif args.command == "downloadFile": 
        filename = args.fileName
        repoN = args.reponame
        if(filename):
            searchfiles(repoN,filename)
        else:
            newRepo = getRepo(repoN)
            contents = expandRepo(repoN)
            questions = [
                {
                    'type' : 'list',
                    'name' : 'dFile',
                    'message' : 'Select a file to download',
                    'choices' : [x.path for x in contents],
                    'filter' : lambda option : option
                    }
                ]
            result = prompt(questions)
            for each in contents:
                if result['dFile'] == each.path:
                    download_files(each)

    elif args.command == "listContents":
        newName = args.reponame
        try:
            contents = expandRepo(newName)
            print("File contents of "+ newName)
            for each in contents:
                print(each.path)
        except Exception as ex:
            print("An error Occured. Repo " + ex.data['message'])

     
    elif args.command == "readMetadata":
        repo = getRepo(args.reponame)
        try:
            content = repo.get_contents("metadata.json")
            contentData = content.decoded_content
            data = contentData.decode('utf8').replace("'", '"')
            jsonData = json.loads(data)
            print("******************** Metadata Contents ********************")
            print("Asset Name: " + jsonData['assetName'])
            print("Description: " + jsonData['description'])
            print("Topics: ", end = '')
            print(*jsonData['Topics'], sep = ",")
            print("Associations: " ,end = '')
            print(*jsonData['Associations'], sep = ",")

        except github.UnknownObjectException:
            print("Metadata file not available.")
            sys.exit()
        except github.BadCredentialsException:
            print("Invalid user token")
            sys.exit()
        except github.GithubException as e:
            print("Error Occured: ", e)
            sys.exit()
        except Exception as e:
            print("Error Occured")


    elif args.command == 'deleteFile':
        repo = getRepo(args.reponame)
        check = False
        try:
            contents = expandRepo(args.reponame)
            for each in contents:
                if each.path == args.fileName:
                    repo.delete_file(each.path, args.fileName + " Deleted",each.sha, branch = 'main')
                    print(args.fileName + " Deleted")
                    sys.exit()
                else:
                    check = True
            if check == True:
                print("File Not Found")
        except github.BadCredentialsException:
            print("User Token Invalid")
            sys.exit()
        except github.UnknownObjectException :
            print("File doesn't exist.")
            sys.exit()
        except github.GithubException as e:
            print("Error Occured:", e)
            sys.exit()
    
    elif args.command == 'list':
        try:
            list_assets("topics")
        except Exception as e:
            print(e)

    if args.command == "search":
        try:
            if args.name != None:
                repo_name_search(args.name)
            elif args.topics != None:
                search("topics",args.topics)
            elif args.keywords != None:
                keyword_search(args.keywords)
            else:
                raise Exception("Error: One of the following search criteria must be provided: name, topics, keywords")
        except Exception as e:
            print(e)

if __name__ == '__main__':

    #login and token part done here
    token = check_login()
    g = Github(token)
    user = g.get_user()
    parser = argparse.ArgumentParser(prog="digitalassets", description="Simple helper commands to interact with Github Repos")
    subparser = parser.add_subparsers(dest='command',help="Below are the commands that are supported with their descriptions")
    #reponame = subparser.add_parser("reponame")


    ############################################################
    ## Update repo related commands
    ############################################################
    update_repo = subparser.add_parser("updateFile", help="Update your digital asset files")
    update_repo.add_argument("--reponame", type = str, required = True, help="Give the name of the repo to be updated")
    update_repo.add_argument("--updateType", type = str, required = True, help="Mention the type of the file to be updated i.e. meta-data or data")
    #update_repo.add_argument("--interactiveBuilding", type = str, required = True)
    update_repo.add_argument("--updateFile", type = str, required = False, help="Mention the name of the file which you want to update")
    update_repo.add_argument("--filepath", type = str, required = False, help="Path of the directiry containing your metadata and data parts")



    #################################################
    ## Subsribe to a repo commands
    ##############################################
    subscribe_repo = subparser.add_parser("subscribeRepo", help="Subscribe to a repo to get updates on the repo")
    subscribe_repo.add_argument("--reponame", type = str, required = True, help = "Give the reponame to which you want to subscribe")

    #################################################
    ## getStatus repo commands
    ##############################################
    getStatus_repo = subparser.add_parser("getStatus", help="Get the status of the repo")
    getStatus_repo.add_argument("--reponame", type = str, required = True, help = "Give the reponame you want to get the status of which you subscribed to ")

    ############################################################
    ## Create repo related commands
    ############################################################

    createRepo = subparser.add_parser("createRepo",help="Create a digital asset repo on GitHub")
    createRepo.add_argument("--reponame",type=str,required=True,help="Give the name of the repo to be created")
    createRepo.add_argument("--path",type=str,required=False,help= "Give a folder path to upload files. If not given will take the current directory")
    createRepo.add_argument("--empty",type=str,required=False,default="False",help="True if we need to create empty repo. By defualt False")
    # createrepo.add_argument("--addtopics",nargs='+',type=str,required=False,help="Give a list of topics separated by spaces. Not a required argument")

    #################################################################
    ##Read and download repo
    #################################################################

    downloadRepo = subparser.add_parser('downloadRepo',help = "Provide the name of the repo to download it as Zip or Tar file")
    downloadFile = subparser.add_parser('downloadFile', help = "Download an individual file from the repo. Requires repo name and file name")
    listContents = subparser.add_parser('listContents', help = "List the contents of the repo")
    readMetadata = subparser.add_parser('readMetadata', help = "Read the metadata file from the repo")
    deleteFile = subparser.add_parser('deleteFile' , help = "Delete a file from the repo. Requires repo name and file name")

    downloadRepo.add_argument('--reponame', type = str, required = True, help = "Name of the repo")
    downloadFile.add_argument('--fileName', type = str, required = False, help = "File name to be downloaded")
    readMetadata.add_argument('--reponame', type = str, required = True, help = "Name of the repo")
    downloadFile.add_argument('--reponame', type = str, required = True, help = "Name of the repo")
    listContents.add_argument('--reponame', type = str, required = True, help = "Name of the repo")
    deleteFile.add_argument('--reponame',type = str, required = True, help = "Name of the repo")
    deleteFile.add_argument('--fileName',type = str, required = True, help = "Name of the file to be deleted")
    
    ############################################################
    ## Search repo related commands
    ############################################################

    search_command = subparser.add_parser("search",help = "Search for digital assets using topics, name or keywords")
    search_command.add_argument("--name", help = "Searches the repo name", type = str)
    search_command.add_argument("--topics", help = "Searches the repo topics", type = str)
    search_command.add_argument("--keywords", help = "Searches the keywords in description", type = str)

    ############################################################
    ## list repo related commands
    ############################################################

    list_command = subparser.add_parser("list",help = "List all the digital assets")


    args = parser.parse_args()
    if args.command not in ["createRepo", "search", "subscribeRepo", "getStatus", "list", "downloadRepo", "downloadFile", "readMetadata", "deleteFile", "listContents"]:
        repo_name = args.reponame
        try:
            repo = g.get_repo(repo_name)
        except GithubException as e:
            if e.status == 404:
                print("Repository not found. Go ahead and create it")
                # sys.exit()
    else:
        pass


    #file_content = repo.get_contents(args.updateFile , ref = 'main')

    ensTopicList = ["ens-machinelearning", "ens-mathematics", "ens-lifesciences", "ens-sports", "ens-others"]
   #  args = parser.parse_args()

    main()
